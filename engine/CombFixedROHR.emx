<?xml version="1.0" encoding="UTF-8"?>
<Document>
  <Icons>
    <Icon size="128" bpp="32" format="png">
<![CDATA[89504e470d0a1a0a0000000d4948445200000080000000800806000000c33e61cb00000006624b474400ff00ff00ffa0bda793000000097048597300000ec400000ec401952b0e1b0000038949444154789ceddd314ee3400085e1c78a4344203a4e10692d0a377b80342895b52748e122c5fa0c69285ce40468aa681b1f80660a64a45c022dca2db2850139890314cb3ae1fd9f84848c338e989fb11d29e164bd5e0bbebef5fd04d02f02304700e608c01c019823007304608e00cc11803902304700e608c01c019823007304608e00cc11803902304700e608c01c019823007304608e00cc11803902304700e608c01c019823007304608e00cc11803902304700e608c0dc89243e25ca182b80b9d3976f628c7d3e0ff4204d5356007704608e00cc11803902304700e608c01c019823007304608e00cc11803902304700e608c01c01982300730460eef4fd5dfab5aaa61acf6a6565d4f59fe6fb5759a93819763d4ad574acf6ae92a4a4d0e266a4416bd3729e2a0f898ac58d464f73a579680d1fd50cbfd43ccd15de18a735e0c618d2f3d89d3bf7ef68568090a79b93df6c543a5f6e6e5b559aa61d932f49f54ce369a555d7011eb6274e0af954d56a6bf2df1867394f77c6906acdc6a9b69fe6a1389a00242929168a31365f65d66c0cb7aa5a33b1fc3d53ade6aff775df181517851249aaeff4b05340add92c6c3ca619bed66c9c2b248516ef8db39cab99fb4c65c771433ed72136703c0164a56edaebe870a29706da8693e617bf7366187cd78f64fff049b1d878ccf0fa79a295a96c2ff783917e761c77791f9a7de3441b871e8c74536692826eabceb5a757077f0df022bbea3ad74b52adc727a9fb842ced9cbff7ec7f79be6780e44267ef1e77a9fb20494179ba7d0a683de2ed27da8ba309e0e3f65c00a2d3170b607bf2db57e0ff238c8e53c0813b9e6b808f583de8ae56739b16a3626cdf7e3de9f1d326ff4c17892405dd1fe295de1bbe560083735d4abb57e8ab4ad3ed5bb97f7b608d9eaf0c9b5bc7f6cf56aaa6a9d234d5948bc0cf36d4552685d0dc7bcffeeba1272ab3a07cdfb19342bf0ef0d5a0afb502a8b90decba3dcccaa845d1dcd8854f5aa78793d6eb132d49b150dcf7ca61cf5e3f1f807707fbe1ddc120007704608e00cc11803902304700e608c01c019823007304608e00cc11803902304700e608c01c019823007304608e00ccf14fa3ccb102983b59af59009cb1029823007304608e00cc11803902304700e608c01c019823007304608e00cc11803902304700e608c01c019823007304608e00cc11803902304700e608c01c019823007304608e00cc11803902304700e608c01c01982300730460ee2fed4b073a401b7d8d0000000049454e44ae426082]]>
     </Icon>
  </Icons>
  <Model version="4.4" build="4.4.1.4356">
    <Sidops>
<![CDATA[ROHR1 446.9 232 description '<Information>
  <Description>
    <LibraryPath>engine\CombFixedROHR.emx</LibraryPath>
    <TimeStamp>2014-10-9 23:01:16</TimeStamp>
    <Version>4.4</Version>
  </Description>
</Information>
'; type Submodel  ports   power out pp;   power out pF;   power out pT;   signal in x_lev; "Controller Input (Throttle)"   signal in omega; "Engine speed (rad/s)"   signal integer out Comb_state; "0: Start of new cycle / 1 : injection started / 2 : start of combustion / 5: end of combustion"   signal out p_max [2,1];   signal in pfi;   signal in fiinj;  restrictions   causality fixed in pp;   causality fixed in pF;   causality fixed in pT; end; icon bg  figures   rectangle 411.1 217 482.6 247 fill 12895428;   text 'name' 447.9 232 16;  terminals   pp 423.9 256 fixed;   pF 470.9 256 fixed;   pT 446.9 256 fixed;   x_lev 422.9 208 fixed;   omega 478.9 208 fixed;   Comb_state 486.9 256 fixed;   pfi 446.9 208 fixed;   fiinj 462.9 208 fixed; end; implementation eqparameters	integer global ncyl;	real global nstroke;	real global hn;//	real global fiinj;	real global mqf_max;	real global pemax;	real global ommax;	real global T_L;	real global T_H;	real global fs;	real global slag, Diam, alam, Veps;	integer global CASE;//Fuel composition [C H O N]	real global FC[4];// Englib	string global dll_ICE;//	string dll_fcn_rohr    = 'ice_rohr';	string dll_icemax    = 'ice_pfimax';	string hidden dll_fcn_ThDP = 'thdyn_CombGasZach'; // subroutines names in the dll file//	string dll_fcn_rohr = 		'ice_rohr2';	real wiebe_para[9] = [0.07;0.57;3.05;11;24;56.3;1.5;1;0.7];variables	real phi;	real phi_comb;	real P, F, T, V_cyl, m_cyl0, Vc;	real dmf;	real mqf_des, mqf, mqf_min;//	real inarr_ROHR[20], outarr_ROHR[13];	real fiig;	real hidden inarr_pfimax[3], outarr_pfimax[2];	real hidden inarr_ThermoProp[3], outarr_ThermoProp[13];	real Pmax, Pmax_pfi;//	real bmepnom, omeganom;//	real eta_i, sfoc;//	real mfPC, mf, Oldmf, OldmfPC;	boolean reset;		real dphi_comb, igdel, dmf_nom;	real yp, ym, yl, yptomp, ymtomm, yltoml, df1dy, df2dy, df3dy;	initialequations	Comb_state = 0;	// 0: Start of new cycle / 1 : injection started / 2 : start of combustion / 5: end of combustion//	if fiinj > 180 then fiinj = fiinj - 360; end;		fiig = 0;	reset = true;	mqf = 0;	dmf = 0;	Vc	= pi*Diam^2/4.0*slag/(Veps-1);	dphi_comb = wiebe_para[3] + wiebe_para[6];code	P=pp.e; F=pF.e; T=pT.e;	phi = pfi*180/pi mod 360;// Deternmine the mass of fuel per cycle not exceeding the stoichiometric ratio	if phi > 180 then 		phi_comb= phi - 360;  	else		phi_comb = phi;	end;	if phi_comb > fiinj and Comb_state == 0 then		Comb_state = 1;		mqf_des = mqf_max * x_lev;		inarr_ThermoProp = [P;T;F];		outarr_ThermoProp = dll(dll_ICE,dll_fcn_ThDP, inarr_ThermoProp);			V_cyl = pi*Diam^2*slag^2/8*alam*(alam + 1 - (alam*cos(pfi) + sqrt(1 - (alam*sin(pfi))^2))) + Vc;		m_cyl0 = P*V_cyl/outarr_ThermoProp[1]/T;			mqf_min = m_cyl0*fs;			mqf = min([mqf_des;m_cyl0*fs]);		igdel = 180/pi*omega*180/pi*0.00020*exp(4650/T)*(P*1e-5)^(-1.19);		if igdel > 30 then			Comb_state = 5;		end;		fiig = fiinj + igdel;		reset = false;			else if phi_comb > fiig and phi_comb < fiig + dphi_comb and Comb_state == 1 then				Comb_state = 2;				reset = true;			else	if phi_comb > fiig + dphi_comb and reset == true then						Comb_state = 5;						reset = false;					end;			end;	end;				if phi_comb > -20 and phi_comb < -15 then		Comb_state = 0;		reset = true;	end;				switch Comb_state		case 2 do			yp = max([(phi_comb - fiig) / wiebe_para[4];0]);			ym = max([0;(phi_comb - (fiig + wiebe_para[3]))/wiebe_para[5]]);			yl = max([0;(phi_comb - (fiig + wiebe_para[3]))/wiebe_para[6]]);			yptomp = yp^wiebe_para[7];			ymtomm = ym^wiebe_para[8];			yltoml = yl^wiebe_para[9];			df1dy = 6.9*(wiebe_para[7] + 1)*yptomp*exp(-6.9*yp*yptomp) / wiebe_para[4];			df2dy = 6.9*(wiebe_para[8] + 1)*ymtomm*exp(-6.9*ym*ymtomm) / wiebe_para[5];			df3dy = 6.9*(wiebe_para[9] + 1)*yltoml*exp(-6.9*yl*yltoml) / wiebe_para[6];			dmf_nom = wiebe_para[1]*df1dy + wiebe_para[2]*df2dy + (1-wiebe_para[1] - wiebe_para[2])*df3dy;			dmf = mqf*dmf_nom*omega*180/pi;		default do			dmf = 0;	end;	// Calculate normalized BMEP and omega (0~1)//	bmepnom = max([0.5;0/pemax]);//	bmepnom = min([1;bmepnom]);//	omeganom = max([0.61;omega/ommax]);//	omeganom = min([1;omeganom]);// Calculate the rate of heat release//	inarr_ROHR[1:11]=[nstroke; fiinj; pfi; P; T; omega; mqf ; hn; bmepnom; Comb_state; fiig];//	inarr_ROHR[12:20] = WiebePara;//	outarr_ROHR=dll(dll_ICE,dll_fcn_rohr, inarr_ROHR);//	if Comb_state == 1 //	dmf = outarr_ROHR[1];//	dqf = outarr_ROHR[2];//	Comb_state = outarr_ROHR[3];//	fiig = outarr_ROHR[4];//	WiebePara = outarr_ROHR[5:13];//	if dmf>0 and dmf<1e-4 then//		dmf = 0;//	end;	pp.f=dmf;	pF.f= dmf;	pT.f=dmf*hn;	//	if Comb_state == 5 then//		reset = true;//	end;	// Get Pmax for cycle 		inarr_pfimax=[time; phi; P];	outarr_pfimax=dll(dll_ICE,dll_icemax, inarr_pfimax);	Pmax=outarr_pfimax[1];Pmax_pfi=outarr_pfimax[2];	p_max = [Pmax;Pmax_pfi];implementation_end;]]>
    </Sidops>
  </Model>
</Document>
